1.
父类名.__init__(参数)
super().__init__(参数)
super(类名，self).__init__(参数)
2.
确定super方法初始化父类的时候的顺序从而使得每次只初始化一次父类
3.
18
4.
类方法
@classmethod
方法名(cls, 其他参数)
静态方法
@staticmethod
方法名()
5.
三类方法均从属于类，在内存中只保存一份
三类方法调用者不同，自动传入的参数也不相同
实例方法为实例所使用的方法，传入实例本身self
类方法为类所调用的方法，传入类对象本身cls
静态方法为不带参数的实例方法，没有参数
6.
property为一种可以使得实例像对属性一样操作的特殊属性，其本质仍然为实例方法
定义时需采用装饰器或property函数定义，调用时不能加括号，且仅有一个self参数，而是需要类似于引用实例属性一样进行赋值和获取
7.
获取property值
@property
方法名(self)
给property赋值
@方法名.setter
方法名(self, 可加一个参数)
删除property值
@方法名.deleter(self)
方法名(self)
8.
__doc__     表示类的描述性信息
__module__  当前操作的类或对象所从属的模块
__class__   当前操作的实例对象所从属的类
__init__    初始化对象时，自动调用
__del__     对象在内存中销毁时，自动调用
__call__    将类变换为可调用类，在类后面加()时调用该方法
__dict__    类或者实例对象包含的属性
__str__     如果重写了该方法，使用print函数打印对象时，输出该方法返回的结果，否则输出对象所属类
__new__     为实例对象创建内存空间，创建对象时自动调用
__iter__    将对象变为可迭代对象，返回一个迭代器
__next__    将对象变为迭代器，返回迭代的下一项
__enter__   上文入口，返回正文对象
__exit__    下文入口
__name__    对象或类的名字
__mro__     初始化子类时候的初始化父类的顺序